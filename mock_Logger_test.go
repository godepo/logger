// Code generated by mockery v2.53.3. DO NOT EDIT.

package logger

import (
	context "context"
	slog "log/slog"

	mock "github.com/stretchr/testify/mock"
)

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: ctx, message, tags
func (_m *MockLogger) Debug(ctx context.Context, message string, tags ...slog.Attr) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
//   - tags ...slog.Attr
func (_e *MockLogger_Expecter) Debug(ctx interface{}, message interface{}, tags ...interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{ctx, message}, tags...)...)}
}

func (_c *MockLogger_Debug_Call) Run(run func(ctx context.Context, message string, tags ...slog.Attr)) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]slog.Attr, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(slog.Attr)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(context.Context, string, ...slog.Attr)) *MockLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function with given fields: ctx, message, tags
func (_m *MockLogger) Error(ctx context.Context, message string, tags ...slog.Attr) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
//   - tags ...slog.Attr
func (_e *MockLogger_Expecter) Error(ctx interface{}, message interface{}, tags ...interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{ctx, message}, tags...)...)}
}

func (_c *MockLogger_Error_Call) Run(run func(ctx context.Context, message string, tags ...slog.Attr)) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]slog.Attr, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(slog.Attr)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(context.Context, string, ...slog.Attr)) *MockLogger_Error_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function with given fields: ctx, message, tags
func (_m *MockLogger) Info(ctx context.Context, message string, tags ...slog.Attr) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
//   - tags ...slog.Attr
func (_e *MockLogger_Expecter) Info(ctx interface{}, message interface{}, tags ...interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{ctx, message}, tags...)...)}
}

func (_c *MockLogger_Info_Call) Run(run func(ctx context.Context, message string, tags ...slog.Attr)) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]slog.Attr, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(slog.Attr)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(context.Context, string, ...slog.Attr)) *MockLogger_Info_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function with given fields: ctx, message, tags
func (_m *MockLogger) Warn(ctx context.Context, message string, tags ...slog.Attr) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
//   - tags ...slog.Attr
func (_e *MockLogger_Expecter) Warn(ctx interface{}, message interface{}, tags ...interface{}) *MockLogger_Warn_Call {
	return &MockLogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{ctx, message}, tags...)...)}
}

func (_c *MockLogger_Warn_Call) Run(run func(ctx context.Context, message string, tags ...slog.Attr)) *MockLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]slog.Attr, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(slog.Attr)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Warn_Call) Return() *MockLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warn_Call) RunAndReturn(run func(context.Context, string, ...slog.Attr)) *MockLogger_Warn_Call {
	_c.Run(run)
	return _c
}

// With provides a mock function with given fields: tags
func (_m *MockLogger) With(tags ...slog.Attr) Logger {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for With")
	}

	var r0 Logger
	if rf, ok := ret.Get(0).(func(...slog.Attr) Logger); ok {
		r0 = rf(tags...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// MockLogger_With_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'With'
type MockLogger_With_Call struct {
	*mock.Call
}

// With is a helper method to define mock.On call
//   - tags ...slog.Attr
func (_e *MockLogger_Expecter) With(tags ...interface{}) *MockLogger_With_Call {
	return &MockLogger_With_Call{Call: _e.mock.On("With",
		append([]interface{}{}, tags...)...)}
}

func (_c *MockLogger_With_Call) Run(run func(tags ...slog.Attr)) *MockLogger_With_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]slog.Attr, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(slog.Attr)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_With_Call) Return(_a0 Logger) *MockLogger_With_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_With_Call) RunAndReturn(run func(...slog.Attr) Logger) *MockLogger_With_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
